openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration:
    post:
      operationId: dj_rest_auth_registration_create
      description: ''
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/registrationverify-email/:
    post:
      operationId: dj_rest_auth_registrationverify_email_create
      description: ''
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /member/{id}/:
    get:
      operationId: member_retrieve
      description: Reads handled by the mixins, and use permission_classes
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    put:
      operationId: member_update
      description: Reads handled by the mixins, and use permission_classes
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Member'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    patch:
      operationId: member_partial_update
      description: Reads handled by the mixins, and use permission_classes
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMember'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /member/{id}/approve/:
    patch:
      operationId: member_approve_partial_update
      description: 'approve the join request '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMember'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /member/{id}/leave/:
    patch:
      operationId: member_leave_partial_update
      description: 'leave this team this is deletion but only to deactivate the record '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMember'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /member/{id}/list_team/:
    get:
      operationId: member_list_team_retrieve
      description: Reads handled by the mixins, and use permission_classes
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /member/{id}/make_admin/:
    patch:
      operationId: member_make_admin_partial_update
      description: 'make the user an admin '
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMember'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /member/create_record/:
    post:
      operationId: member_create_record_create
      description: Reads handled by the mixins, and use permission_classes
      tags:
      - member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Member'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /status/{id}/:
    get:
      operationId: status_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket status.
        required: true
      tags:
      - status
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatus'
          description: ''
    put:
      operationId: status_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket status.
        required: true
      tags:
      - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketStatus'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatus'
          description: ''
    patch:
      operationId: status_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket status.
        required: true
      tags:
      - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicketStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicketStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicketStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatus'
          description: ''
    delete:
      operationId: status_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket status.
        required: true
      tags:
      - status
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /status/{id}/list_team/:
    get:
      operationId: status_list_team_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket status.
        required: true
      tags:
      - status
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatus'
          description: ''
  /status/create_record/:
    post:
      operationId: status_create_record_create
      description: ''
      tags:
      - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketStatus'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatus'
          description: ''
  /tag/{id}/:
    get:
      operationId: tag_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - tag
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: tag_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: tag_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: tag_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - tag
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /tag/{id}/list_team/:
    get:
      operationId: tag_list_team_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - tag
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /tag/create_record/:
    post:
      operationId: tag_create_record_create
      description: ''
      tags:
      - tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /team/:
    get:
      operationId: team_list
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - team
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamList'
          description: ''
  /team/{id}/:
    get:
      operationId: team_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - team
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    put:
      operationId: team_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    patch:
      operationId: team_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    delete:
      operationId: team_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - team
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /team/create_record/:
    post:
      operationId: team_create_record_create
      description: ''
      tags:
      - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
  /ticket-comment/:
    get:
      operationId: ticket_comment_list
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - ticket-comment
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTicketCommentList'
          description: ''
    post:
      operationId: ticket_comment_create
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      tags:
      - ticket-comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketComment'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketComment'
          description: ''
  /ticket-comment/{id}/:
    get:
      operationId: ticket_comment_retrieve
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket comment.
        required: true
      tags:
      - ticket-comment
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketComment'
          description: ''
    put:
      operationId: ticket_comment_update
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket comment.
        required: true
      tags:
      - ticket-comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketComment'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketComment'
          description: ''
    patch:
      operationId: ticket_comment_partial_update
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket comment.
        required: true
      tags:
      - ticket-comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicketComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicketComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicketComment'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketComment'
          description: ''
    delete:
      operationId: ticket_comment_destroy
      description: Basic crud should be pre-generated, so we only need to do the more
        complicated calls
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket comment.
        required: true
      tags:
      - ticket-comment
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /ticket-comment/recent_comments/:
    get:
      operationId: ticket_comment_recent_comments_retrieve
      description: 'This call returns the first page of comments associated with the
        given team_id '
      tags:
      - ticket-comment
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketComment'
          description: ''
  /ticket/{id}/:
    get:
      operationId: ticket_retrieve
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
    put:
      operationId: ticket_update
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ticket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
    patch:
      operationId: ticket_partial_update
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /ticket/{id}/add_as_subticket/:
    patch:
      operationId: ticket_add_as_subticket_partial_update
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /ticket/{id}/add_subticket/:
    patch:
      operationId: ticket_add_subticket_partial_update
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /ticket/{id}/delete/:
    delete:
      operationId: ticket_delete_destroy
      description: 'deactivate this ticket this is deletion but only to deactivate
        the record '
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /ticket/{id}/list_team/:
    get:
      operationId: ticket_list_team_retrieve
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /ticket/{id}/update_status/:
    patch:
      operationId: ticket_update_status_partial_update
      description: This viewset automatically provides `list` and `detail` actions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ticket.
        required: true
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicket'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /ticket/create_record/:
    post:
      operationId: ticket_create_record_create
      description: This viewset automatically provides `list` and `detail` actions.
      tags:
      - ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ticket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    Member:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        team_id:
          type: integer
          readOnly: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        bio:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - activated
      - bio
      - created
      - deactivated
      - id
      - object_uuid
      - owner
      - role
      - team_id
    PaginatedTeamList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Team'
    PaginatedTicketCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TicketComment'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedMember:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        team_id:
          type: integer
          readOnly: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        bio:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    PatchedTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    PatchedTeam:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        ticket_head:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    PatchedTicket:
      type: object
      description: |-
        Serializer Class for the Ticket model.

        The fields that are serialized and visible currently are:
            id: The id of the Ticket
            team_id: id of owner team
            owner: The user that created the ticket
            assigned_user: The user assigned to the ticket
            title: The title of the ticket
            description: The description of the ticket
            comments: The comments associated with this ticket
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        ticket_number:
          type: integer
          readOnly: true
        tag_list:
          type: array
          items:
            $ref: '#/components/schemas/TicketTag'
          readOnly: true
        tag_id_list:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        parent_id:
          type: integer
          writeOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        assigned_user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        assigned_user_id:
          type: integer
          writeOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/TicketStatus'
          readOnly: true
        status_id:
          type: integer
          writeOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TicketComment'
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    PatchedTicketComment:
      type: object
      description: Serializer for comments. to be used with tickets
      properties:
        id:
          type: integer
          readOnly: true
        ticket_id:
          type: integer
          readOnly: true
        team_id:
          type: integer
          readOnly: true
        owner:
          type: integer
          nullable: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        content:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
        deactivated:
          type: string
          format: date-time
          nullable: true
    PatchedTicketStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
        deactivated:
          type: string
          format: date-time
          nullable: true
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password1
      - password2
      - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    RoleEnum:
      enum:
      - UA
      - AP
      - AD
      type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - activated
      - created
      - deactivated
      - id
      - object_uuid
      - team_id
      - title
    Team:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        ticket_head:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - activated
      - created
      - deactivated
      - description
      - id
      - name
      - object_uuid
      - ticket_head
    Ticket:
      type: object
      description: |-
        Serializer Class for the Ticket model.

        The fields that are serialized and visible currently are:
            id: The id of the Ticket
            team_id: id of owner team
            owner: The user that created the ticket
            assigned_user: The user assigned to the ticket
            title: The title of the ticket
            description: The description of the ticket
            comments: The comments associated with this ticket
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        ticket_number:
          type: integer
          readOnly: true
        tag_list:
          type: array
          items:
            $ref: '#/components/schemas/TicketTag'
          readOnly: true
        tag_id_list:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        parent_id:
          type: integer
          writeOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        assigned_user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        assigned_user_id:
          type: integer
          writeOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/TicketStatus'
          readOnly: true
        status_id:
          type: integer
          writeOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TicketComment'
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - activated
      - assigned_user
      - created
      - deactivated
      - id
      - object_uuid
      - owner
      - status
      - tag_list
      - team_id
      - ticket_number
      - title
    TicketComment:
      type: object
      description: Serializer for comments. to be used with tickets
      properties:
        id:
          type: integer
          readOnly: true
        ticket_id:
          type: integer
          readOnly: true
        team_id:
          type: integer
          readOnly: true
        owner:
          type: integer
          nullable: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        content:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
        deactivated:
          type: string
          format: date-time
          nullable: true
      required:
      - content
      - created
      - id
      - object_uuid
      - team_id
      - ticket_id
    TicketStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        team_id:
          type: integer
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        created:
          type: string
          format: date-time
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
        deactivated:
          type: string
          format: date-time
          nullable: true
      required:
      - created
      - id
      - object_uuid
      - team_id
      - title
    TicketTag:
      type: object
      properties:
        tag:
          allOf:
          - $ref: '#/components/schemas/Tag'
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        object_uuid:
          type: string
          format: uuid
          readOnly: true
        activated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deactivated:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required:
      - activated
      - created
      - deactivated
      - object_uuid
      - tag
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
